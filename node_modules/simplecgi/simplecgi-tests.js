#!/usr/bin/env node

  var assert  = require('assert');
  var express = require('express');
  var http    = require('http');

  var oneDay = 24*60*60*1000;

/*******************************************************************************
*                                                                              *
*                           SimpleCGI Factory Tests                            *
*                                                                              *
*******************************************************************************/

  var SimpleCGI = require('simplecgi');

  http.globalAgent.maxSockets = 50;

  suite('SimpleCGI Factory Tests', function () {
test('omitting "CGIProcessor" should throw an exception', function () {
  assert.throws(function () {
    SimpleCGI(undefined, __dirname, /.*/);
  }, /^Error: MissingArgument: /);

  assert.throws(function () {
    SimpleCGI(null, __dirname, /.*/);
  }, /^Error: MissingArgument: /);
});


test('an unforeseen "CGIProcessor" type should throw an exception', function () {
  assert.throws(function () {
    SimpleCGI(true, __dirname, /.*/);
  }, /^Error: IllegalArgument: /);

  assert.throws(function () {
    SimpleCGI(1.234, __dirname, /.*/);
  }, /^Error: IllegalArgument: /);

  assert.throws(function () {
    SimpleCGI({}, __dirname, /.*/);
  }, /^Error: IllegalArgument: /);

  assert.throws(function () {
    SimpleCGI([], __dirname, /.*/);
  }, /^Error: IllegalArgument: /);
});


test('an empty "CGIProcessor" type should throw an exception', function () {
  assert.throws(function () {
    SimpleCGI('', __dirname, /.*/);
  }, /^Error: EmptyArgument: /);
});


test('a missing "CGIProcessor" should throw an exception', function () {
  assert.throws(function () {
    SimpleCGI('no-such-CGIProcessor', __dirname, /.*/);
  }, /^Error: InvalidArgument: /);
});


test('a non-executable "CGIProcessor" file should throw an exception', function () {
//  assert.throws(function () {
//    SimpleCGI(__dirname, __dirname, /.*/);
//  }, /^Error: InvalidArgument: /);

//  assert.throws(function () {
//    SimpleCGI('/dev/tty', __dirname, /.*/);
//  }, /^Error: InvalidArgument: /);

//  assert.throws(function () {    // please do not mark these tests as executable!
//    SimpleCGI(__filename, __dirname, /.*/);
//  }, /^Error: InvalidArgument: /);
});
test('omitting "CGIBaseFolder" should throw an exception', function () {
  assert.throws(function () {
    SimpleCGI('/bin/echo', undefined, /.*/);
  }, /^Error: MissingArgument: /);

  assert.throws(function () {
    SimpleCGI('/bin/echo', null, /.*/);
  }, /^Error: MissingArgument: /);
});


test('an unforeseen "CGIBaseFolder" type should throw an exception', function () {
  assert.throws(function () {
    SimpleCGI('/bin/echo', true, /.*/);
  }, /^Error: IllegalArgument: /);

  assert.throws(function () {
    SimpleCGI('/bin/echo', 1.234, /.*/);
  }, /^Error: IllegalArgument: /);

  assert.throws(function () {
    SimpleCGI('/bin/echo', {}, /.*/);
  }, /^Error: IllegalArgument: /);

  assert.throws(function () {
    SimpleCGI('/bin/echo', [], /.*/);
  }, /^Error: IllegalArgument: /);
});


test('an empty "CGIBaseFolder" type should throw an exception', function () {
  assert.throws(function () {
    SimpleCGI('/bin/echo', '', /.*/);
  }, /^Error: EmptyArgument: /);
});


test('a missing "CGIBaseFolder" should throw an exception', function () {
  assert.throws(function () {
    SimpleCGI('/bin/echo', 'no-such-CGIBaseFolder', /.*/);
  }, /^Error: InvalidArgument: /);
});


test('a "CGIBaseFolder" which is not actually a folder should throw an exception', function () {
  assert.throws(function () {
    SimpleCGI('/bin/echo', '/dev/tty', /.*/);
  }, /^Error: InvalidArgument: /);

  assert.throws(function () {
    SimpleCGI('/bin/echo', __filename, /.*/);
  }, /^Error: InvalidArgument: /);
});
test('omitting "ScriptNameRule" should throw an exception', function () {
  assert.throws(function () {
    SimpleCGI('/bin/echo', __dirname, undefined);
  }, /^Error: MissingArgument: /);

  assert.throws(function () {
    SimpleCGI('/bin/echo', __dirname, null);
  }, /^Error: MissingArgument: /);
});


test('an unforeseen "ScriptNameRule" type should throw an exception', function () {
  assert.throws(function () {
    SimpleCGI('/bin/echo', __dirname, true);
  }, /^Error: IllegalArgument: /);

  assert.throws(function () {
    SimpleCGI('/bin/echo', __dirname, 1.234);
  }, /^Error: IllegalArgument: /);

  assert.throws(function () {
    SimpleCGI('/bin/echo', __dirname, {});
  }, /^Error: IllegalArgument: /);

  assert.throws(function () {
    SimpleCGI('/bin/echo', __dirname, []);
  }, /^Error: IllegalArgument: /);
});


test('an empty "ScriptNameRule" type should throw an exception', function () {
  assert.throws(function () {
    SimpleCGI('/bin/echo', __dirname, '');
  }, /^Error: EmptyArgument: /);
});

  });

  suite('SimpleCGI Environment Variables Tests', function () {
  var WebServer;

  before(function () {
    WebServer = express();
      WebServer.all(/^.*[.]sh/, require('simplecgi')(  // RegExp is not perfect!
        __dirname + '/simplecgi-tests/bash.sh',
        __dirname + '/simplecgi-tests', /^.*[.]sh/                       // dto.
      ));

      WebServer.all('*', function (res, req, next) {
        res.send(500, 'WebServer did not invoke CGI Processor');
      });

      WebServer.use(express.errorHandler());
    WebServer = WebServer.listen(0);               // actually starts the server
  });


  after(function (done) {
    WebServer.close(done);
  });

//------------------------------------------------------------------------------
// submitRequest                auxiliary method for asynchronous HTTP requests
//------------------------------------------------------------------------------

  var submitRequest = function submitRequest (Options, Callback) {
    Options.host    = '127.0.0.1'; // WebServer.address().address;
    Options.port    = WebServer.address().port;
    Options.method  = Options.method || 'GET';
    Options.path    = Options.path || '/printenv.sh';
//  Options.headers = ...
//  Options.auth    = ...
//  Options.body    = ...

    if ((Options.body !== undefined) && (Options.body !== null)) {
      Options.headers = Options.headers || {};
      Options.headers['content-length'] = Options.body.length;
    };

    var Request = http.request(Options, function (Response) {
      var Data = null;

      Response.on('data', function (Chunk) {
        Data = (Data === null ? Chunk : Data + Chunk);
      });

      Response.on('end', function () {
        Response.body = Data;
        Callback(Response);
      });
    });

    if ((Options.body !== undefined) && (Options.body !== null)) {
      Request.write(Options.body);
    };

    Request.end();
  };

//------------------------------------------------------------------------------
// submitRequest_200     submitRequest expecting status 200 with non-empty body
//------------------------------------------------------------------------------

  var submitRequest_200 = function submitRequest_200 (Options, Callback) {
    submitRequest(Options, function (Response) {
      assert.equal(Response.statusCode, 200, 'successful response expected');

      assert.notEqual(Response.body, null, 'non-empty response expected');

      Callback(Response, Response.body.toString('binary'));
    });
  };

test('all relevant Environment Variables are available', function (done) {
  submitRequest_200({}, function (Response, Body) {
    assert.ok(Body.indexOf('AUTH_TYPE=')            > -1);
    assert.ok(Body.indexOf('CONTENT_LENGTH=')       > -1);
    assert.ok(Body.indexOf('CONTENT_TYPE=')         > -1);
    assert.ok(Body.indexOf('DOCUMENT_ROOT=' + __dirname + '/simplecgi-tests\n') > -1);
    assert.ok(Body.indexOf('GATEWAY_INTERFACE=CGI/1.1\n') > -1);
    assert.ok(Body.indexOf('HTTP_ACCEPT=')          > -1);
    assert.ok(Body.indexOf('HTTP_ACCEPT_CHARSET=')  > -1);
//  assert.ok(Body.indexOf('HTTP_ACCEPT_ENCODING=\n') > -1);
    assert.ok(Body.indexOf('HTTP_ACCEPT_LANGUAGE=') > -1);
    assert.ok(Body.indexOf('HTTP_CONNECTION=')      > -1);
    assert.ok(Body.indexOf('HTTP_COOKIE=')          > -1);
    assert.ok(Body.indexOf('HTTP_HOST=')            > -1);
    assert.ok(Body.indexOf('HTTP_REFERER=')         > -1);
    assert.ok(Body.indexOf('HTTP_USER_AGENT=')      > -1);
    assert.ok(Body.indexOf('PATH_INFO=')            > -1);
    assert.ok(Body.indexOf('PATH_TRANSLATED=' + __dirname + '/simplecgi-tests/printenv.sh\n') > -1);
    assert.ok(Body.indexOf('QUERY_STRING=')         > -1);
    assert.ok(Body.indexOf('REMOTE_ADDR=')          > -1);
    assert.ok(Body.indexOf('REMOTE_HOST=\n')        > -1);
    assert.ok(Body.indexOf('REMOTE_IDENT=\n')       > -1);
    assert.ok(Body.indexOf('REMOTE_PORT=')          > -1);
    assert.ok(Body.indexOf('REMOTE_USER=')          > -1);
    assert.ok(Body.indexOf('REQUEST_METHOD=')       > -1);
    assert.ok(Body.indexOf('REQUEST_URI=')          > -1);
    assert.ok(Body.indexOf('SCRIPT_FILENAME=' + __dirname + '/simplecgi-tests/printenv.sh\n') > -1);
    assert.ok(Body.indexOf('SCRIPT_NAME=printenv.sh') > -1);
    assert.ok(Body.indexOf('SERVER_ADDR=')          > -1);
    assert.ok(Body.indexOf('SERVER_ADMIN=(none)\n') > -1);
    assert.ok(Body.indexOf('SERVER_NAME=\n')        > -1);
    assert.ok(Body.indexOf('SERVER_PORT=' + WebServer.address().port) > -1);
    assert.ok(Body.indexOf('SERVER_PROTOCOL=HTTP/1') > -1);
    assert.ok(Body.indexOf('SERVER_SIGNATURE=Node.js with Express.js and SimpleCGI\n') > -1);
    assert.ok(Body.indexOf('SERVER_SOFTWARE=Node.js ' + process.version + '\n') > -1);

    done();
  });
});
test('$AUTH_TYPE remains empty without authentication', function (done) {
  submitRequest_200({}, function (Response, Body) {
    assert.ok(Body.indexOf('AUTH_TYPE=\n') > -1);
    done();
  });
});

test('$AUTH_TYPE is "BASIC" with authentication', function (done) {
  submitRequest_200({auth:'user:password'}, function (Response, Body) {
    assert.ok(Body.indexOf('AUTH_TYPE=Basic\n') > -1);
    done();
  });
});



test('$CONTENT_LENGTH remains 0 without body', function (done) {
  submitRequest_200({}, function (Response, Body) {
    assert.ok(Body.indexOf('CONTENT_LENGTH=0\n') > -1);
    done();
  });
});

test('$CONTENT_LENGTH contains length of body', function (done) {
  submitRequest_200({body:'1234567890'}, function (Response, Body) {
    assert.ok(Body.indexOf('CONTENT_LENGTH=10\n') > -1);
    done();
  });
});



test('$CONTENT_TYPE is missing without body', function (done) {
  submitRequest_200({}, function (Response, Body) {
    assert.ok(Body.indexOf('CONTENT_TYPE=\n') > -1);
    done();
  });
});

test('$CONTENT_TYPE contains type of body', function (done) {
  submitRequest_200({
    headers: {'content-type':'text/plain'},
    body:    '1234567890'
  }, function (Response, Body) {
    assert.ok(Body.indexOf('CONTENT_TYPE=text/plain\n') > -1);
    done();
  });
});



test('$HTTP_ACCEPT contains accepted media types', function (done) {
  submitRequest_200({
    headers: {'accept':'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'}
  }, function (Response, Body) {
    assert.ok(Body.indexOf('HTTP_ACCEPT=text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\n') > -1);
    done();
  });
});



test('$HTTP_ACCEPT_CHARSET contains accepted character sets', function (done) {
  submitRequest_200({
    headers: {'accept':'text/html', 'accept-charset':'iso-8859-1'}
  }, function (Response, Body) {
    assert.ok(Body.indexOf('HTTP_ACCEPT_CHARSET=iso-8859-1\n') > -1);
    done();
  });
});



test('$HTTP_ACCEPT_LANGUAGE contains accepted languages', function (done) {
  submitRequest_200({
    headers: {'accept':'text/html', 'accept-language':'en-US'}
  }, function (Response, Body) {
    assert.ok(Body.indexOf('HTTP_ACCEPT_LANGUAGE=en-US\n') > -1);
    done();
  });
});



test('$HTTP_CONNECTION contains connection characteristics', function (done) {
  submitRequest_200({
    headers: {'connection':'close'}
  }, function (Response, Body) {
    assert.ok(Body.indexOf('HTTP_CONNECTION=close\n') > -1);
    done();
  });
});



test('$HTTP_CONNECTION contains connection characteristics', function (done) {
  submitRequest_200({
    headers: {'connection':'close'}
  }, function (Response, Body) {
    assert.ok(Body.indexOf('HTTP_CONNECTION=close\n') > -1);
    done();
  });
});



test('$HTTP_COOKIE remains empty without a cookie', function (done) {
  submitRequest_200({}, function (Response, Body) {
    assert.ok(Body.indexOf('HTTP_COOKIE=\n') > -1);
    done();
  });
});

test('$HTTP_COOKIE contains cookie', function (done) {
  submitRequest_200({
    headers: {'cookie':'$Version=1; Key=Value;'}
  }, function (Response, Body) {
    assert.ok(Body.indexOf('HTTP_COOKIE=$Version=1; Key=Value;\n') > -1);
    done();
  });
});



test('$HTTP_HOST contains the given (virtual) host', function (done) {
  submitRequest_200({
    headers: {'host':'any.virtual.host'}
  }, function (Response, Body) {
    assert.ok(Body.indexOf('HTTP_HOST=any.virtual.host\n') > -1);
    done();
  });
});



test('$HTTP_REFERER remains empty without a referrer', function (done) {
  submitRequest_200({}, function (Response, Body) {
    assert.ok(Body.indexOf('HTTP_REFERER=\n') > -1);
    done();
  });
});

test('$HTTP_REFERER contains referrer', function (done) {
  submitRequest_200({
    headers: {'referer':'http://some.where/else'}
  }, function (Response, Body) {
    assert.ok(Body.indexOf('HTTP_REFERER=http://some.where/else\n') > -1);
    done();
  });
});



test('$HTTP_USER_AGENT contains information about this test', function (done) {
  submitRequest_200({
    headers: {'user-agent':'automated tests'}
  }, function (Response, Body) {
    assert.ok(Body.indexOf('HTTP_USER_AGENT=automated tests\n') > -1);
    done();
  });
});



test('$PATH_INFO remains empty in the default case', function (done) {
  submitRequest_200({}, function (Response, Body) {
    assert.ok(Body.indexOf('PATH_INFO=\n') > -1);
    done();
  });
});

test('$PATH_INFO contains path after CGI reference', function (done) {
  submitRequest_200({
    path: '/printenv.sh/anything/else'
  }, function (Response, Body) {
    assert.ok(Body.indexOf('PATH_INFO=/anything/else\n') > -1);
    done();
  });
});

test('$PATH_INFO contains path after CGI reference', function (done) {
  submitRequest_200({
    path: '/printenv.sh#with_anchor'
  }, function (Response, Body) {
    assert.ok(Body.indexOf('PATH_INFO=#with_anchor\n') > -1);
    done();
  });
});



test('$QUERY_STRING remains empty without a query string', function (done) {
  submitRequest_200({}, function (Response, Body) {
    assert.ok(Body.indexOf('QUERY_STRING=\n') > -1);
    done();
  });
});

test('$QUERY_STRING contains the query string', function (done) {
  submitRequest_200({
    path: '/printenv.sh?any+query+string'
  }, function (Response, Body) {
    assert.ok(Body.indexOf('QUERY_STRING=any+query+string\n') > -1);
    done();
  });
});



test('$REMOTE_ADDR contains the address of this host', function (done) {
  submitRequest_200({}, function (Response, Body) {
    assert.ok(
      (Body.indexOf('REMOTE_ADDR=localhost\n') > -1) ||
      (Body.indexOf('REMOTE_ADDR=127.0.0.1\n') > -1) ||
      (Body.indexOf('REMOTE_ADDR=' + WebServer.address().address + '\n') > -1)
    );
    done();
  });
});



test('$REMOTE_PORT contains a port number', function (done) {
  submitRequest_200({}, function (Response, Body) {
    assert.ok(Body.search(/REMOTE_PORT=[0-9]+\n/) > -1);
    done();
  });
});



test('$REMOTE_USER remains empty without authentication', function (done) {
  submitRequest_200({}, function (Response, Body) {
    assert.ok(Body.indexOf('REMOTE_USER=\n') > -1);
    done();
  });
});

test('$REMOTE_USER contains name of authenticated user', function (done) {
  submitRequest_200({auth:'user:password'}, function (Response, Body) {
    assert.ok(Body.indexOf('REMOTE_USER=user\n') > -1);
    done();
  });
});



test('$REQUEST_METHOD contains the request method', function (done) {
  submitRequest_200({}, function (Response, Body) {
    assert.ok(Body.indexOf('REQUEST_METHOD=GET\n') > -1);
    done();
  });
});

test('$REQUEST_METHOD contains PUT', function (done) {
  submitRequest_200({method:'PUT'}, function (Response, Body) {
    assert.ok(Body.indexOf('REQUEST_METHOD=PUT\n') > -1);
    done();
  });
});

test('$REQUEST_METHOD contains POST', function (done) {
  submitRequest_200({method:'POST'}, function (Response, Body) {
    assert.ok(Body.indexOf('REQUEST_METHOD=POST\n') > -1);
    done();
  });
});

test('$REQUEST_METHOD contains DELETE', function (done) {
  submitRequest_200({method:'DELETE'}, function (Response, Body) {
    assert.ok(Body.indexOf('REQUEST_METHOD=DELETE\n') > -1);
    done();
  });
});
/*
test('$REQUEST_METHOD contains HEAD', function (done) {
  submitRequest_200({method:'HEAD'}, function (Response, Body) {
    assert.ok(Body.indexOf('REQUEST_METHOD=HEAD\n') > -1);
    done();
  });
});
*/
  });

  suite('SimpleCGI CGI Processor Tests', function () {
  var WebServer;

  before(function (done) {
    WebServer = express();
      WebServer.all(/^.*[.]sh/, require('simplecgi')(  // RegExp is not perfect!
        __dirname + '/simplecgi-tests/bash.sh',
        __dirname + '/simplecgi-tests', /^.*[.]sh/                       // dto.
      ));

      WebServer.all('*', function (res, req, next) {
        res.send(500, 'WebServer did not invoke CGI Processor');
      });

      WebServer.use(express.errorHandler());
    WebServer = WebServer.listen(0,done);          // actually starts the server
  });


  after(function (done) {
    WebServer.close(done);
  });

//------------------------------------------------------------------------------
// submitRequest                auxiliary method for asynchronous HTTP requests
//------------------------------------------------------------------------------

  var submitRequest = function submitRequest (Options, Callback) {
    Options.host    = WebServer.address().address;
    Options.port    = WebServer.address().port;
    Options.method  = Options.method || 'GET';
    Options.path    = Options.path || '/evalInput.sh';
//  Options.headers = ...
//  Options.auth    = ...
//  Options.body    = ...

    if ((Options.body !== undefined) && (Options.body !== null)) {
      Options.headers = Options.headers || {};
      Options.headers['content-length'] = Options.body.length;
    };

    var Request = http.request(Options, function (Response) {
      var Data = null;

      Response.on('data', function (Chunk) {
        Data = (Data === null ? Chunk : Data + Chunk);
      });

      Response.on('end', function () {
        Response.body = Data;
        Callback(Response, Response.body === null ? null : Response.body.toString('binary'));
      });
    });

    if ((Options.body !== undefined) && (Options.body !== null)) {
      Request.write(Options.body);
    };

    Request.end();
  };

test('succeeding CGI requests result in StatusCode 20x', function (done) {
  submitRequest({
    body:'exit 0'
  }, function (Response, Body) {
    assert.ok(
      (Response.statusCode >= 200) && (Response.statusCode < 300),
      'successful response expected'
    );
    assert.equal(Body, null, 'empty response expected');

    done();
  });
});
/*
test('failing CGI requests result in StatusCode 500', function (done) {
  submitRequest({
    body:'exit 1'
  }, function (Response, Body) {
    assert.equal   (Response.statusCode, 500, '"Internal Server Error" expected');
    assert.notEqual(Body, null, 'non-empty response expected');
    assert.equal   (Body, 'CGI Processor failed (see log file)', 'error message expected');

    done();
  });
});
*/


test('StatusCode may also be set explicitly', function (done) {
  submitRequest({
    body:'echo "status:222\r"; echo "\r"; echo "Dummy Body"'
  }, function (Response, Body) {
    assert.equal   (Response.statusCode, 222, 'status code 222 expected');
    assert.notEqual(Body, null, 'non-empty response expected');
    assert.equal   (Body, 'Dummy Body\n', 'dummy body expected');

    done();
  });
});



test('CGI requests with output result in StatusCode 200', function (done) {
  submitRequest({
    body:'echo "Hello, World!"'         // should not be recognized as a header!
  }, function (Response, Body) {
    assert.equal   (Response.statusCode, 200, 'successful response expected');
    assert.notEqual(Body, null, 'non-empty response expected');
    assert.equal   (Body, 'Hello, World!\n', 'command output expected');

    done();
  });
});

/*
  this test does not seem to work!

test('CGI requests without output result in StatusCode 204', function (done) {
  submitRequest({
    body:'exit'
  }, function (Response, Body) {
    assert.equal   (Response.statusCode, 204, 'successful response expected');
    assert.notEqual(Body, null, 'non-empty response expected');
    assert.equal   (Body, null, 'empty response expected');

    done();
  });
});
*/

// output to stderr is only logged (currently) and not tested here


test('HTTP headers may be explicitly inserted', function (done) {
  submitRequest({
    body:'echo "status:204\r"; echo "x-empty-header:\r"; echo "x-header:not empty\r"'
  }, function (Response, Body) {
    assert.equal(Response.statusCode, 204, 'successful response expected');
    assert.equal(Response.headers['x-empty-header'], '', 'empty header expected');
    assert.equal(Response.headers['x-header'], 'not empty', 'non-empty header expected');

    done();
  });
});



test('binary content may be sent and/or received', function (done) {
  var Body = new Buffer(256);
    for (var i = 0; i < 256; i++) {
      Body[i] = i;
    };

  submitRequest({
    path:'/echo.sh',
    body:Body
  }, function (Response, Body) {
    assert.equal(Response.statusCode, 200, 'successful response expected');
    assert.equal(Response.headers['content-type'], 'application/octet-stream', 'binary response expected');

    assert.notEqual(Body, null, 'non-empty response expected');
    assert.equal(Body.length, 256, '256 bytes expected');

    for (var i = 0; i < 256; i++) {
      assert.equal(
        Body.charCodeAt(i), i,
        'byte value ' + i + ' at position ' + i + ' expected'
      );
    };

    done();
  });
});
  });